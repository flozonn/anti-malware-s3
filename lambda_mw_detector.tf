resource "aws_lambda_function" "mw_detector_layer_version" {
  function_name    = "mw_detector_layer_version"
  handler          = "index.handler"
  runtime          = "nodejs20.x"
  filename         = "${path.module}/mw_detector/mw_detector.zip"
  source_code_hash = filebase64sha256("${path.module}/mw_detector/mw_detector.zip")
  role             = aws_iam_role.mw_detector_role.arn
  timeout          = 600
  memory_size      = 6144
  architectures    = ["arm64"]
  depends_on       = [aws_efs_mount_target.alpha]
  layers           = [aws_lambda_layer_version.clamav_layer.arn]
  file_system_config {
    arn              = aws_efs_access_point.access_point_for_mw_detector.arn
    local_mount_path = "/mnt/efs"
  }

  vpc_config {
    # Attention - > Cross-AZ mounts are not permitted.
    subnet_ids         = [aws_subnet.private_subnet2.id]
    security_group_ids = [aws_security_group.sg_for_mw_detector.id]
  }

  tracing_config {
    mode = "Active"
  }


  environment {
    variables = {

      TOPIC_ARN         = "${aws_sns_topic.virus_found.arn}"
    }
  }

}

// Sec Group
resource "aws_security_group" "sg_for_mw_detector" {
  name        = "sg_for_mw_detector"
  description = "openbar"
  vpc_id      = aws_vpc.mw_detector_vpc.id

  ingress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

// ROLE + POLICIES
resource "aws_iam_role" "mw_detector_role" {
  name = "lambda_execution_mw_detector_role"
  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Effect = "Allow",
        Principal = {
          Service = "lambda.amazonaws.com"
        },
        Action = "sts:AssumeRole"
      }
    ]
  })
}

resource "aws_iam_policy" "xray_mw_detector" {
  name        = "xray_mw_detector"
  description = "Policy for allowing writing segments to xray"
  policy = jsonencode({
    "Version" : "2012-10-17",
    "Statement" : [
      {
        "Effect" : "Allow",
        "Action" : [
          "xray:PutTraceSegments",
          "xray:PutTelemetryRecords",
          "xray:PutTraceSegments",
          "xray:PutTelemetryRecords",
          "xray:GetSamplingRules",
          "xray:GetSamplingTargets",
          "xray:GetSamplingStatisticSummaries",
          "logs:*"
        ],
        "Resource" : "*"
      }
    ]
    }
  )
}

resource "aws_iam_policy" "s3_mw_detector" {
  name        = "s3_mw_detector"
  description = "Policy for allowing access to s3"
  policy = jsonencode({
    "Version" : "2012-10-17",
    "Statement" : [
      {
        "Effect" : "Allow",
        "Action" : [
          "s3:*"
        ],
        "Resource" : "*"
      }
    ]
    }
  )
}

resource "aws_iam_policy" "ec2_mw_detector" {
  name        = "ec2_mw_detector"
  description = "Policy to allow create ENI"
  policy = jsonencode({
    "Version" : "2012-10-17",
    "Statement" : [
      {
        "Effect" : "Allow",
        "Action" : [
          "ec2:*"
        ],
        "Resource" : "*"
      }
    ]
    }
  )
}

resource "aws_iam_policy" "sns_mw_detector" {
  name        = "sns_mw_detector"
  description = "Policy to publish to sns"
  policy = jsonencode({
    "Version" : "2012-10-17",
    "Statement" : [
      {
        "Effect" : "Allow",
        "Action" : [
          "sns:*"
        ],
        "Resource" : "*"
      }
    ]
    }
  )
}


resource "aws_iam_policy" "sqs_mw_detector" {
  name        = "sqs_mw_detector"
  description = "Policy to publish to sqs"
  policy = jsonencode({
    "Version" : "2012-10-17",
    "Statement" : [
      {
        "Effect" : "Allow",
        "Action" : [
          "sqs:*"
        ],
        "Resource" : "*"
      }
    ]
    }
  )
}

resource "aws_iam_policy_attachment" "lambda_execution_mw_detector_policy_attachment" {
  name       = "lambda_execution_mw_datector_policy_attachment"
  roles      = [aws_iam_role.mw_detector_role.name]
  policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
}


resource "aws_iam_role_policy_attachment" "xray_mw_detector_attachment" {
  role       = aws_iam_role.mw_detector_role.name
  policy_arn = aws_iam_policy.xray_mw_detector.arn
}


resource "aws_iam_role_policy_attachment" "s3_mw_detector_attachment" {
  role       = aws_iam_role.mw_detector_role.name
  policy_arn = aws_iam_policy.s3_mw_detector.arn
}


resource "aws_iam_role_policy_attachment" "ec2_mw_detector_attachment" {
  role       = aws_iam_role.mw_detector_role.name
  policy_arn = aws_iam_policy.ec2_mw_detector.arn
}


resource "aws_iam_role_policy_attachment" "sns_mw_detector_attachment" {
  role       = aws_iam_role.mw_detector_role.name
  policy_arn = aws_iam_policy.sns_mw_detector.arn
}


resource "aws_iam_role_policy_attachment" "sqs_mw_detector_attachment" {
  role       = aws_iam_role.mw_detector_role.name
  policy_arn = aws_iam_policy.sqs_mw_detector.arn
}

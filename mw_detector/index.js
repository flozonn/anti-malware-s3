
import { S3Client, GetObjectCommand, PutObjectTaggingCommand} from '@aws-sdk/client-s3'
import { SNSClient, PublishCommand } from '@aws-sdk/client-sns'

import { spawnSync } from 'child_process'
import { mkdir, writeFile, unlink } from 'fs/promises'


const s3Client = new S3Client()
const SnsClient = new SNSClient()

await mkdir('/tmp/clamscan_tmp', { recursive: true })
await mkdir('/mnt/efs/files_quarantine', { recursive: true })

async function handler(event, context) {

console.log('EVENT RECEIVED ', JSON.stringify(event, null, 2))

  for (const record of event.Records) {
    let bucketName;
    let objectKey;
    if( record.eventSource === 'aws:s3'){
      bucketName = record.s3.bucket.name
      objectKey = record.s3.object.key
    }
    if (record.eventSource === 'aws:sqs') {
      console.log('SQS event detected !!!!!!! , ' , JSON.parse(record.body).Message)
      bucketName =  JSON.parse(JSON.parse(record.body).Message).Records[0].s3.bucket.name
      objectKey = JSON.parse(JSON.parse(record.body).Message).Records[0].s3.object.key
    }

    const getObjectCommand = new GetObjectCommand({
      Bucket: bucketName,
      Key: objectKey
    })
    const s3Object = await s3Client.send(getObjectCommand)
    const s3ObjectContent = await s3Object.Body?.transformToString()
    console.log("DLD object: ", s3ObjectContent)

    const tmpFilePath = `/mnt/efs/files_quarantine/${objectKey}`
    console.log("tmp file path " , tmpFilePath)
    await writeFile(tmpFilePath, s3ObjectContent, { encoding: 'utf-8' })
    console.log('file written ')
    const clamavScan = spawnSync(
      'clamscan',
      [
        '--verbose',
        '--stdout',
        '--database=/mnt/efs/database',
        '--tempdir=/tmp/clamscan_tmp',
        tmpFilePath
       
      ],
      {
        encoding: 'utf-8', 
        stdio: 'pipe',
        shell: true

      }
    )
    console.log("file scanned ")
    if (clamavScan.status === 0) {
      const input = {
            Bucket: bucketName,
            Key: objectKey,
            Tagging: {
            TagSet: [
              {
                Key: 'clamscanResult',
                Value: 'allGood'
              }
            ]
      }
    }
    const command = new PutObjectTaggingCommand(input)
    const tag = await s3Client.send(command)

      console.log('no virus found')
    } else if (clamavScan.status === 1) {
      // Add tag
      const input = {
          Bucket: bucketName,
          Key: objectKey,
          Tagging: {
            TagSet: [
              {
                Key: 'clamscanResult', 
                Value: 'virusFound'
              }
            ]
          }
      }
      const command = new PutObjectTaggingCommand(input)
      const tag = await s3Client.send(command)
      // send email notification
      const notif = {
          TopicArn: process.env.TOPIC_ARN,
           Message: JSON.stringify({
              default: JSON.stringify( clamavScan
              )
            }),
          Subject: 'clamavScan ALERT',
          MessageStructure: 'json'
        }
        const notify = new PublishCommand(notif)
        const response = await SnsClient.send(notify)

  
      console.log('virus found')
    } else if (clamavScan.status === 2) {
      const input = {
      Bucket: bucketName,
      Key: objectKey,
      Tagging: {
        TagSet: [
          {
            Key: 'clamscanResult',
            Value: 'scanningError'
          }
        ]
      }
    }
    const command = new PutObjectTaggingCommand(input)
    const tag = await s3Client.send(command)

      console.log('some error(s) occured in clamscan')
    }

    console.log(JSON.stringify(clamavScan, null, 2))
    await unlink(tmpFilePath)


}
return 

}
export { handler }
